
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##Combine geneExp datasets and metadata for fetal and adult EUR
> 
> #Set up packages and functions
> setwd("~/project-gandalm/GandalLab")
> output_dir <- ("~/project-gandalm/comb_data/new_data/")
> source("data_functions.R")
> source("analysis_fcts.R")
> # List of required packages
> #required_packages <- c("magrittr", "genio", "dplyr", "BiocManager", "SummarizedExperiment")
> required_packages <- c("magrittr","dplyr")
> # Install or load missing packages
> load_install_pkg(required_packages)
Loading required package: magrittr
Loading required package: dplyr

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

[[1]]
[1] TRUE

[[2]]
[1] TRUE

> #library(magrittr)
> #library(dplyr)
> #library(SummarizedExperiment)
> #library(argparser)
> #library(tximport)
> #library(tximeta)
> 
> # p <- arg_parser("Generate covariates with various number of HCP")
> # p <- add_argument(p, "--num_hcp", help="Number of HCP in covariates")
> # p <- add_argument(p, "--expr", help="Normalized, ComBat")
> # p <- add_argument(p, "--picard", help="Compiled picard metrics")
> # p <- add_argument(p, "--geno_pc", help="Ancestry specific gPC")
> # p <- add_argument(p, "--meta", help="Metadata")
> # p <- add_argument(p, "--num_gpc", help="Number of gPC in covariates")
> # p <- add_argument(p, "--outdir", help="Out dir")
> # 
> # args <- parse_args(p)
> 
> #fetal paths
> fetal_counts_path <- "~/project-gandalm/fetal_rmlow_counts.tsv"
> fetal_tpm_path <- "~/project-gandalm/fetal_rmlow_tpm.tsv"
> #fetal_counts_path <- "/u/project/gandalm/cindywen/isoform_twas/salmon/expression.final/gene.noVersion.scaled.counts.tsv"
> #fetal_tpm_path <- "/u/project/gandalm/cindywen/isoform_twas/salmon/expression.final/gene.noVersion.TPM.tsv"
> fetal_meta_path <- "/u/project/gandalm/cindywen/isoform_twas/eqtl_new/metadata_654.tsv"
> #adult paths
> adult_counts_path <- "~/project-gandalm/adult.counts.scaled.tsv"
> adult_tpm_path <- "~/project-gandalm/adult.TPM.tsv"
> adult_meta_path <- "/u/project/gandalm/kafadare/cov_hcp0_gene.txt"
> #load data for fetal & adult
> fetal <- load_data(names = c("counts", "tpm", "meta"), fetal_counts_path, fetal_tpm_path, fetal_meta_path)
> adult <- load_data(names = c("counts", "tpm", "meta"), adult_counts_path, adult_tpm_path, adult_meta_path)
> adult$ancestry <-  read.table("/u/project/gandalm/kafadare/pops.txt", header = F, sep = "\t", col.names = c("id", "ancestry"))
> colnames(adult$counts) <- id_format_fix(colnames(adult$counts))
> colnames(adult$tpm) <- id_format_fix(colnames(adult$tpm))
> 
> #fetal$genExp.tpm <- read.table("/u/project/gandalm/cindywen/isoform_twas/salmon/expression.final/gene.noVersion.TPM.tsv", header = TRUE, sep = "\t") #tpm file
> 
> #reformat adult metadata and add batch column from the RDS file
> adult_se <- readRDS("/u/home/k/kafadare/project-gandalm/AdultBigBrain_gene_exp_raw_042923.RDS")
> adult$meta <- as.data.frame(t(adult$meta))
> colnames(adult$meta) <- adult$meta[1, ]
> adult$meta <- adult$meta[-1, ]
> #add adult data batch column in metadata df
> batch_index <- match(colData(adult_se)$names,rownames(adult$meta))
Error in colData(adult_se) : could not find function "colData"
Calls: match
Execution halted
